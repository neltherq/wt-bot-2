# app/bot.py
import os
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    User
)
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from app.db import init_db, ensure_user, get_user, get_balance_rub, add_balance_rub

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN", "")

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# === reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–Ω–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å) ===
def main_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
    )

# === inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –±–∞–ª–∞–Ω—Å–∞ ===
def balance_actions_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="balance:back"),
            InlineKeyboardButton(text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="balance:deposit"),
        ]
    ])

# === inline-–∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã ===
def pay_methods_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ lolz", callback_data="pay:method:lolz")]
    ])

def fmt_username(u: User) -> str:
    parts = []
    if getattr(u, "first_name", None):
        parts.append(u.first_name)
    if getattr(u, "last_name", None):
        parts.append(u.last_name)
    name = " ".join(parts) if parts else (u.username or f"id{u.id}")
    if u.username:
        name = f"{name} (@{u.username})"
    return name

@dp.message(CommandStart())
async def cmd_start(message: Message):
    await ensure_user(message.from_user.id, message.from_user.username)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n"
        "‚Äî –ù–∞–∂–º–∏ ¬´üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å¬ª —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ.\n"
        "‚Äî –ù–∞–∂–º–∏ ¬´üí∞ –ë–∞–ª–∞–Ω—Å¬ª —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.",
        reply_markup=main_kb(),
    )

@dp.message(Command("profile"))
@dp.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    await ensure_user(message.from_user.id, message.from_user.username)
    urec = await get_user(message.from_user.id)
    bal = await get_balance_rub(message.from_user.id)

    created = urec.get("created_at") if urec else "‚Äî"
    updated = urec.get("updated_at") if urec else "‚Äî"
    username = message.from_user.username or "‚Äî"

    text = (
        "üßæ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"üë§ –ò–º—è: {fmt_username(message.from_user)}\n"
        f"üÜî User ID: <code>{message.from_user.id}</code>\n"
        f"üîó Username: @{username}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{bal} ‚ÇΩ</b>\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω: {created}\n"
        f"‚ôªÔ∏è –û–±–Ω–æ–≤–ª—ë–Ω: {updated}\n"
    )
    await message.answer(text, reply_markup=main_kb())

# === –≠–∫—Ä–∞–Ω –±–∞–ª–∞–Ω—Å–∞ (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º + –¥–≤–µ inline-–∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É) ===
@dp.message(Command("balance"))
@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: Message):
    await ensure_user(message.from_user.id, message.from_user.username)
    bal = await get_balance_rub(message.from_user.id)
    await message.answer(
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å</b>: {bal} ‚ÇΩ",
        reply_markup=balance_actions_kb()
    )

# –ù–∞–∑–∞–¥ ‚Äî —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
@dp.callback_query(F.data == "balance:back")
async def cb_balance_back(cq):
    await cq.answer("–ù–∞–∑–∞–¥")
    try:
        await cq.message.delete()
    except Exception:
        # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å (–Ω–µ—Ç –ø—Ä–∞–≤/—É–∂–µ —É–¥–∞–ª–µ–Ω–æ) ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        await cq.message.edit_reply_markup(reply_markup=None)

# –ü–æ–ø–æ–ª–Ω–∏—Ç—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
@dp.callback_query(F.data == "balance:deposit")
async def cb_balance_deposit(cq):
    await cq.answer()
    await cq.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:",
        reply_markup=pay_methods_kb()
    )

# –ù–∞–∂–∞–ª–∏ ¬´lolz¬ª ‚Äî –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
@dp.callback_query(F.data == "pay:method:lolz")
async def cb_pay_method_lolz(cq):
    await cq.answer("–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: lolz (—Å–∫–æ—Ä–æ –ø–æ–¥–∫–ª—é—á–∏–º)")
    # –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å:
    # await cq.message.edit_text("–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: lolz\n(–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç)", reply_markup=None)

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ)
@dp.message(Command("deposit"))
async def cmd_deposit(message: Message):
    await ensure_user(message.from_user.id, message.from_user.username)
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        return await message.reply("–£–∫–∞–∂–∏ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: /deposit 100", reply_markup=main_kb())

    try:
        delta_rub = int(parts[1])
        if delta_rub <= 0:
            return await message.reply("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.", reply_markup=main_kb())
    except ValueError:
        return await message.reply("–£–∫–∞–∂–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Ä—É–±–ª–µ–π. –ü—Ä–∏–º–µ—Ä: /deposit 150", reply_markup=main_kb())

    await add_balance_rub(message.from_user.id, delta_rub)
    bal = await get_balance_rub(message.from_user.id)
    await message.answer(f"–ó–∞—á–∏—Å–ª–µ–Ω–æ: {delta_rub} ‚ÇΩ\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {bal} ‚ÇΩ", reply_markup=main_kb())

async def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
