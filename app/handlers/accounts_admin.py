# app/handlers/accounts_admin.py
import os
import re
import logging
from dotenv import load_dotenv

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.states.accounts import AddAccountStates
from app.db import add_account  # –¥–ª—è 8 rank (–æ—Å–Ω–æ–≤–Ω–∞—è –ë–î)
from app.keyboards.admin_wt import admin_choose_rank_kb
from app.db_ranks import insert_account as insert_account_rank  # –¥–ª—è 7/6 rank

# –ü–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º .env —Å—Ä–∞–∑—É (–≤–∞–∂–Ω–æ –¥–ª—è ADMIN_USERNAMES)
load_dotenv()

logger = logging.getLogger(__name__)
router = Router(name="accounts_admin")

# -------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ --------------------

def _admin_unames() -> set[str]:
    raw = os.getenv("ADMIN_USERNAMES", "") or ""
    parts = re.split(r"[\s,]+", raw.strip())
    return {p.lower() for p in parts if p}

def _is_admin(msg: Message) -> bool:
    admins = _admin_unames()
    if not admins:
        logger.error("ADMIN_USERNAMES –ø—É—Å—Ç ‚Äî –∞–¥–º–∏–Ω-–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.")
        return False
    uname = (msg.from_user.username or "").lower()
    return uname in admins

# -------------------- –°—Ç–∞—Ä—Ç: –≤—ã–±–æ—Ä —Ä–∞–∑–¥–µ–ª–∞ (rank) --------------------

@router.message(Command("addacc"))
@router.message(F.text.regexp(r"^/addacc(\s|$)"))
async def cmd_addacc(message: Message, state: FSMContext):
    logger.info("Got /addacc from user=%s uname=%s", message.from_user.id, message.from_user.username)
    if not _is_admin(message):
        return await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ù–∞—Å—Ç—Ä–æ–π ADMIN_USERNAMES –≤ .env")
    await state.clear()
    await state.set_state(AddAccountStates.waiting_rank)
    await message.reply("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª (rank) –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:", reply_markup=admin_choose_rank_kb())

@router.callback_query(F.data.startswith("admin:add:rank:"))
async def admin_pick_rank(cb: CallbackQuery, state: FSMContext):
    rank = cb.data.split(":")[-1]  # '8' | '7' | '6'
    category = "WarThunder" if rank == "8" else f"{rank} rank"
    await state.update_data(rank=rank, category=category)
    await state.set_state(AddAccountStates.waiting_creds)
    await cb.message.edit_text("–û—Ç–ø—Ä–∞–≤—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>login:password</code>", parse_mode="HTML")
    await cb.answer()

@router.callback_query(F.data == "admin:add:cancel")
async def admin_add_cancel(cb: CallbackQuery, state: FSMContext):
    await state.clear()
    await cb.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    await cb.answer()

# -------------------- –®–∞–≥ 1: –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å --------------------

@router.message(AddAccountStates.waiting_creds)
async def addacc_creds(message: Message, state: FSMContext):
    text = (message.text or "").strip()
    if ":" not in text or len(text.split(":", 1)) < 2:
        return await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –§–æ—Ä–º–∞—Ç: <code>login:password</code>")
    await state.update_data(creds=text)
    await message.reply("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –ù–ê–ó–í–ê–ù–ò–ï –¥–ª—è –∫–Ω–æ–ø–∫–∏ (–∫–æ—Ä–æ—Ç–∫–æ).")
    await state.set_state(AddAccountStates.waiting_button_title)

# -------------------- –®–∞–≥ 2: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ --------------------

@router.message(AddAccountStates.waiting_button_title)
async def addacc_button_title(message: Message, state: FSMContext):
    name = (message.text or "").strip()
    if not name:
        return await message.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑.")
    await state.update_data(button_title=name)
    await message.reply("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å üì∑ –§–û–¢–û —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤ –ø–æ–¥–ø–∏—Å–∏ (–æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ).")
    await state.set_state(AddAccountStates.waiting_photo)

# -------------------- –®–∞–≥ 3: —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é --------------------

@router.message(AddAccountStates.waiting_photo, F.photo)
async def addacc_photo(message: Message, state: FSMContext):
    caption = message.caption or ""
    photo_sizes = message.photo or []
    file_id = photo_sizes[-1].file_id if photo_sizes else None
    await state.update_data(photo_file_id=file_id, caption=caption)
    await message.reply("–£–∫–∞–∂–∏ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
    await state.set_state(AddAccountStates.waiting_price)

@router.message(AddAccountStates.waiting_photo)
async def addacc_photo_required(message: Message, state: FSMContext):
    await message.reply("–ù—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º).")

# -------------------- –®–∞–≥ 4: —Ü–µ–Ω–∞ --------------------

@router.message(AddAccountStates.waiting_price)
async def addacc_price(message: Message, state: FSMContext):
    try:
        price = int((message.text or "").strip())
        if price <= 0:
            raise ValueError
    except Exception:
        return await message.reply("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0. –í–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑.")

    data = await state.get_data()
    rank = data.get("rank", "8")
    category = data.get("category", "WarThunder")
    creds = data.get("creds")
    button_title = data.get("button_title")
    photo_file_id = data.get("photo_file_id")
    caption = data.get("caption")

    logger.info("Creating account: rank=%s cat=%s title=%r price=%s by=%s",
                rank, category, button_title, price, message.from_user.id)

    if rank == "8":
        acc_id = await add_account(
            category=category,
            button_title=button_title,
            creds=creds,
            photo_file_id=photo_file_id,
            caption=caption,
            price_rub=price,
            created_by=message.from_user.id
        )
    else:
        acc_id = await insert_account_rank(
            rank,
            button_title=button_title,
            creds=creds,
            photo_file_id=photo_file_id,
            caption=caption,
            price_rub=price,
            category=category
        )

    await state.clear()
    await message.reply(
        "‚úÖ –ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω.\n"
        f"ID: <code>{acc_id}</code>\n"
        f"–†–∞–∑–¥–µ–ª: <b>{rank} rank</b>\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category}</b>\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{button_title}</b>\n"
        f"–¶–µ–Ω–∞: <b>{price} ‚ÇΩ</b>"
    )
