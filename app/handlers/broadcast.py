# app/handlers/broadcast.py
import asyncio
import logging
from typing import Iterable

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramRetryAfter, TelegramForbiddenError, TelegramBadRequest

from app.states.broadcast import BroadcastStates
from app.db_broadcast import (
    is_admin,
    get_all_recipient_ids,
    upsert_recipient,
    create_broadcast,
    finalize_broadcast,
    update_progress,
    add_delivery_result,
)

router = Router()
log = logging.getLogger(__name__)

def _confirm_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="broadcast:send")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞",   callback_data="broadcast:cancel")],
    ])

# ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–∑—ã–≤–∞—Ç—å –≥–¥–µ-—Ç–æ –≤ /start, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:
@router.message(Command("start"))
async def track_recipient_on_start(message: Message):
    # –Ω–µ –ª–æ–º–∞–µ–º —Ç–≤–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π /start ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–µ–º —é–∑–µ—Ä–∞ –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    try:
        await upsert_recipient(message.from_user.id, active=True)
    except Exception:
        log.exception("failed to upsert recipient")

@router.message(Command("send"))
async def cmd_send(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        return await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.")
    await state.set_state(BroadcastStates.waiting_content)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ **—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏** (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç/–≥–∏—Ñ/–≥–æ–ª–æ—Å/–∞–ª—å–±–æ–º).\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è –ø–æ–∫–∞–∂—É –ø—Ä–µ–≤—å—é –∏ –ø–æ–ø—Ä–æ—à—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.",
        parse_mode="Markdown"
    )

@router.message(BroadcastStates.waiting_content)
async def got_content(message: Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ¬´–∏—Å—Ç–æ—á–Ω–∏–∫¬ª –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(src_chat_id=message.chat.id, src_msg_id=message.message_id)
    await state.set_state(BroadcastStates.confirm)

    # –ø—Ä–µ–≤—å—é ‚Äî –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        await message.copy_to(chat_id=message.chat.id)
    except Exception:
        pass

    await message.answer("–≠—Ç–æ –ø—Ä–µ–≤—å—é —Ä–∞—Å—Å—ã–ª–∫–∏. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º?", reply_markup=_confirm_kb())

@router.callback_query(BroadcastStates.confirm, F.data == "broadcast:cancel")
async def cancel_broadcast(cq: CallbackQuery, state: FSMContext):
    await state.clear()
    await cq.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await cq.answer()

@router.callback_query(BroadcastStates.confirm, F.data == "broadcast:send")
async def do_broadcast(cq: CallbackQuery, state: FSMContext):
    if not await is_admin(cq.from_user.id):
        return await cq.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", show_alert=True)

    data = await state.get_data()
    src_chat_id = data["src_chat_id"]
    src_msg_id  = data["src_msg_id"]

    # —Å–æ–±–∏—Ä–∞–µ–º –∞–¥—Ä–µ—Å–∞—Ç–æ–≤
    user_ids: Iterable[int] = await get_all_recipient_ids(only_active=True)
    total = len(user_ids)
    if total == 0:
        await cq.answer("–ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", show_alert=True)
        return

    # –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    bcast_id = await create_broadcast(
        author_id=cq.from_user.id, src_chat_id=src_chat_id, src_msg_id=src_msg_id
    )

    await cq.answer("–°—Ç–∞—Ä—Ç—É—é —Ä–∞—Å—Å—ã–ª–∫—É‚Ä¶")
    await cq.message.edit_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {total} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π‚Ä¶")

    sent = failed = 0
    sem = asyncio.Semaphore(20)  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º

    async def _send_one(uid: int):
        nonlocal sent, failed
        try:
            async with sem:
                await cq.bot.copy_message(chat_id=uid, from_chat_id=src_chat_id, message_id=src_msg_id)
            sent += 1
            await update_progress(bcast_id, sent_inc=1)
            await add_delivery_result(bcast_id, uid, status="ok")
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after + 1)
            return await _send_one(uid)
        except (TelegramForbiddenError, TelegramBadRequest) as e:
            failed += 1
            await update_progress(bcast_id, fail_inc=1)
            await add_delivery_result(bcast_id, uid, status="fail", error=str(e)[:500])
        except Exception as e:
            log.exception("broadcast fail user=%s: %s", uid, e)
            failed += 1
            await update_progress(bcast_id, fail_inc=1)
            await add_delivery_result(bcast_id, uid, status="fail", error=str(e)[:500])

    tasks = [asyncio.create_task(_send_one(uid)) for uid in user_ids]
    await asyncio.gather(*tasks)

    await finalize_broadcast(bcast_id, total=total, status="done")
    await state.clear()
    await cq.message.edit_text(f"–ì–æ—Ç–æ–≤–æ. –†–∞–∑–æ—Å–ª–∞–Ω–æ: {sent}/{total}. –û—à–∏–±–æ–∫: {failed}.")
