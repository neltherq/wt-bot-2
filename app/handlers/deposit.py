# app/handlers/deposit.py
import logging
import json
import random
import string
import re
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from app.states.deposit import DepositStates
from app.keyboards.balance import back_kb, pay_methods_kb, pay_lolz_kb
from app.db import (
    create_payment,
    get_payment_by_comment,
    mark_payment_success,
    ensure_user,
    add_balance_rub,
)
from app.services import lolz  # build_pay_url / find_payment_by_comment / extract_success_operation

logger = logging.getLogger(__name__)
router = Router()

# ======== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ========
_EXPIRE_HOURS = 3           # —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–ª–∞—Ç–µ–∂–∞
_MIN_DEPOSIT_RUB = 100      # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è


# ======== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞ ========

def _coerce_dt(v):
    """–ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–≤–µ—Å—Ç–∏ created_at –∫ datetime (UTC)."""
    if isinstance(v, datetime):
        return v
    if isinstance(v, str):
        try:
            if v.endswith("Z"):
                return datetime.strptime(v, "%Y-%m-%dT%H:%M:%SZ")
            if "+" in v:
                base = v.split("+", 1)[0].rstrip()
                return datetime.fromisoformat(base)
            return datetime.fromisoformat(v)
        except Exception:
            return None
    return None


def _expires_at(created_at: datetime | None) -> datetime:
    base = created_at or datetime.utcnow()
    return base + timedelta(hours=_EXPIRE_HOURS)


def _left_and_deadline(created_at: datetime | None) -> tuple[str, str]:
    exp = _expires_at(created_at)
    now = datetime.utcnow()
    left = exp - now
    if left.total_seconds() < 0:
        left = timedelta(0)
    hours = left.days * 24 + left.seconds // 3600
    minutes = (left.seconds % 3600) // 60
    seconds = left.seconds % 60
    left_str = f"{hours:02d}:{minutes:02d}:{seconds:02d}"
    deadline_str = exp.strftime("%d.%m %H:%M UTC")
    return left_str, deadline_str


def _is_expired(created_at: datetime | None) -> bool:
    return datetime.utcnow() >= _expires_at(created_at)


# ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ========

def _gen_comment_local(length: int = 14) -> str:
    return "".join(random.choices(string.digits, k=length))


async def _gen_unique_comment() -> str:
    for _ in range(5):
        c = _gen_comment_local(14)
        if not await get_payment_by_comment(c):
            return c
    return _gen_comment_local(16)


# ======== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ —Å—á—ë—Ç–∞ ========

def expired_invoice_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂", callback_data="balance:deposit")]
    ])


# === —Å—Ç–∞—Ä—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ INLINE –∫–Ω–æ–ø–∫—É –Ω–∞ —ç–∫—Ä–∞–Ω–µ –±–∞–ª–∞–Ω—Å–∞ ===
@router.callback_query(F.data == "balance:deposit")
async def cb_balance_deposit(cq: CallbackQuery, state: FSMContext):
    try:
        await cq.answer()
        await cq.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ —Ä—É–±–ª—è—Ö):",
            reply_markup=back_kb("deposit:back"),
        )
        await state.set_state(DepositStates.waiting_amount)
    except Exception:
        logger.exception("balance:deposit handler failed")
        await cq.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", show_alert=True)


# === fallback: –µ—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç —Ç–µ–∫—Å—Ç ¬´–ø–æ–ø–æ–ª–Ω–∏—Ç—å¬ª ===
@router.message(F.text.regexp(re.compile(r"(?i)^(\+?\s*)?–ø–æ–ø–æ–ª–Ω–∏—Ç—å$")))
async def msg_balance_deposit(message: Message, state: FSMContext):
    try:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ —Ä—É–±–ª—è—Ö):",
            reply_markup=back_kb("deposit:back"),
        )
        await state.set_state(DepositStates.waiting_amount)
    except Exception:
        logger.exception("text deposit fallback failed")


# === –í–ê–ñ–ù–û: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–µ–π—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—à—ë–ª –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª ===
_ALLOWED_PREFIXES = ("balance:deposit", "deposit:", "pay:")

@router.callback_query(DepositStates.waiting_amount)
async def clear_waiting_on_foreign_callback(cb: CallbackQuery, state: FSMContext):
    data = (cb.data or "")
    if data.startswith(_ALLOWED_PREFIXES):
        return  # –Ω–∞—à–∏ –∫–Ω–æ–ø–∫–∏ ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
    await state.clear()
    return  # –ø–æ–∑–≤–æ–ª—è–µ–º –¥—Ä—É–≥–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç callback

@router.callback_query(DepositStates.choosing_method)
async def clear_choosing_on_foreign_callback(cb: CallbackQuery, state: FSMContext):
    data = (cb.data or "")
    if data.startswith(_ALLOWED_PREFIXES):
        return
    await state.clear()
    return


# === –≤–≤–æ–¥ —Å—É–º–º—ã (—Ü–µ–ª—ã–µ —Ä—É–±–ª–∏, –º–∏–Ω–∏–º—É–º 100) ===
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û —Ç–æ, —á—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ (—Ä–∞–∑—Ä–µ—à–∞–µ–º "1 000", "1,000", "1_000")
@router.message(DepositStates.waiting_amount, F.text.regexp(r"^[\d\s,._]+$"))
async def deposit_amount_entered(message: Message, state: FSMContext):
    raw = (message.text or "").strip()
    numerish = re.sub(r"[ \t,._]", "", raw)

    try:
        amount = int(numerish)
        if amount <= 0:
            raise ValueError
    except Exception:
        return await message.reply("–£–∫–∞–∂–∏ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–≤ —Ä—É–±–ª—è—Ö).")

    if amount < _MIN_DEPOSIT_RUB:
        return await message.reply(
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî <b>{_MIN_DEPOSIT_RUB} ‚ÇΩ</b>.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ—Ç {_MIN_DEPOSIT_RUB} ‚ÇΩ."
        )

    await state.update_data(amount=amount)
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –Ω–∞ —Å—É–º–º—É {amount} ‚ÇΩ:",
        reply_markup=pay_methods_kb(),
    )
    await state.set_state(DepositStates.choosing_method)


# === –Ω–∞–∑–∞–¥ –∏–∑ —à–∞–≥–∞ ¬´–≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É¬ª ===
@router.callback_query(F.data == "deposit:back")
async def cb_deposit_back(cq: CallbackQuery, state: FSMContext):
    await cq.answer("–ù–∞–∑–∞–¥")
    await state.clear()
    try:
        await cq.message.delete()
    except Exception:
        await cq.message.edit_reply_markup(reply_markup=None)


# === –Ω–∞–∑–∞–¥ –∏–∑ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã ===
@router.callback_query(F.data == "pay:back")
async def cb_pay_back(cq: CallbackQuery, state: FSMContext):
    await cq.answer("–ù–∞–∑–∞–¥")
    await state.clear()
    try:
        await cq.message.delete()
    except Exception:
        await cq.message.edit_reply_markup(reply_markup=None)


# === –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞: lolz ===
@router.callback_query(F.data == "pay:method:lolz")
async def cb_pay_method_lolz(cq: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    amount = int(data.get("amount", 0))
    if amount <= 0:
        await cq.answer("–°—É–º–º–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–ø–æ–ª–Ω–∏—Ç—å¬ª —Å–Ω–æ–≤–∞.", show_alert=True)
        return
    if amount < _MIN_DEPOSIT_RUB:
        await cq.answer(
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ ‚Äî {_MIN_DEPOSIT_RUB} ‚ÇΩ. "
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            show_alert=True
        )
        return

    await ensure_user(cq.from_user.id, cq.from_user.username)

    # –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂
    comment = await _gen_unique_comment()
    await create_payment(
        user_id=cq.from_user.id,
        method="lolz",
        amount_rub=amount,
        comment=comment,
        status="pending",
        raw_json=None,
    )
    logger.info("payment pending created: user=%s amount=%s comment=%s", cq.from_user.id, amount, comment)

    pay_url = lolz.build_pay_url(amount_rub=amount, comment=comment)
    if not pay_url:
        await cq.answer("–ù–∏–∫ lolz –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
        return

    left_str, deadline_str = _left_and_deadline(created_at=None)
    await cq.answer("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ –≤ lolz")
    await cq.message.edit_text(
        f"–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: <b>lolz</b>\n"
        f"–°—É–º–º–∞: <b>{amount} ‚ÇΩ</b>\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∫–æ–¥): <code>{comment}</code>\n\n"
        "1) –ù–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å –≤ lolz¬ª –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ\n"
        "2) –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª\n\n"
        f"‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:</b> {left_str}\n"
        f"üïí <b>–°—á—ë—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ:</b> {deadline_str}\n"
        "‚ö†Ô∏è –ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã.",
        reply_markup=pay_lolz_kb(pay_url, comment),
    )


# === –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã ===
@router.callback_query(F.data.startswith("pay:check:"))
async def cb_pay_check(cq: CallbackQuery, state: FSMContext):
    try:
        comment = cq.data.split("pay:check:", 1)[1]
        rec = await get_payment_by_comment(comment)
        if not rec:
            await cq.answer("–õ–æ–∫–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        amount = int(rec["amount_rub"])
        created_at = _coerce_dt(rec.get("created_at")) if isinstance(rec, dict) else None
        expired = _is_expired(created_at)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ API Lolz
        res = await lolz.find_payment_by_comment(comment)
        status = res.get("status_code", 0)
        if status in (0, 401, 403):
            await cq.answer(
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –Ω–µ—Ç/–Ω–µ–≤–µ—Ä–Ω—ã–π API —Ç–æ–∫–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏.\n"
                "–ê–¥–º–∏–Ω—É: –ø—Ä–æ–≤–µ—Ä—å LOLZ_API_TOKEN –≤ .env –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞.",
                show_alert=True
            )
            return

        op = lolz.extract_success_operation(res.get("json", {}), expected_amount_rub=amount)

        # –µ—Å–ª–∏ –ø–ª–∞—Ç—ë–∂ –Ω–∞–π–¥–µ–Ω ‚Äî –∑–∞—á–∏—Å–ª—è–µ–º
        if op:
            await add_balance_rub(cq.from_user.id, amount)
            await mark_payment_success(
                comment,
                ext_operation_id=op["operation_id"],
                raw_json=json.dumps(res["json"]),
            )
            await state.clear()
            await cq.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
            # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å edit_text; –µ—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –∑–∞–º–µ–Ω–∏ –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await cq.message.edit_text(
                f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ\n"
                f"–°—É–º–º–∞: <b>{amount} ‚ÇΩ</b>\n"
                f"–ö–æ–¥: <code>{comment}</code>\n"
                f"–û–ø–µ—Ä–∞—Ü–∏—è: <code>{op['operation_id']}</code>",
                reply_markup=None
            )
            return

        # –µ—Å–ª–∏ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ –∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ ‚Äî –ù–ï —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
        # —Å–Ω–∏–º–∞–µ–º —Å –Ω–µ–≥–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —à–ª—ë–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ.
        if expired:
            try:
                await cq.message.edit_reply_markup(reply_markup=None)
            except Exception:
                pass
            await cq.message.answer(
                "‚õîÔ∏è <b>–í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫–ª–æ.</b>\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂, –Ω–∞–∂–∞–≤ ¬´–ü–æ–ø–æ–ª–Ω–∏—Ç—å¬ª, –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
                reply_markup=expired_invoice_kb()
            )
            await cq.answer()
            return

        # –µ—Å–ª–∏ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ –∏ —Å—Ä–æ–∫ –µ—â—ë –¥–µ–π—Å—Ç–≤—É–µ—Ç ‚Äî —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await cq.answer("–ü–ª–∞—Ç—ë–∂ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception:
        logger.exception("pay:check handler failed")
        await cq.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ", show_alert=True)
