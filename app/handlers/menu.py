# app/handlers/menu.py
import logging
from math import ceil
from pathlib import Path

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile

from app.keyboards.main_menu import main_menu_kb
from app.keyboards.accounts import accounts_list_kb, account_card_kb, MAX_ROWS
from app.db import (
    ensure_user, get_balance_rub, get_user,
    list_accounts, count_accounts, get_account_by_id, purchase_account
)

logger = logging.getLogger(__name__)
router = Router()

CATEGORY = "WarThunder"

# ---------- –ø–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–π —à–∞–ø–∫–∏ ----------
def _find_header_image() -> str | None:
    """
    –ò—â–µ–º images/image.png –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—Ç–∞—Ö:
    - <–∫–æ—Ä–µ–Ω—å>/images/image.png (—Ä—è–¥–æ–º —Å main.py)
    - <cwd>/images/image.png
    - app/images/image.png
    - app/handlers/images/image.png
    """
    candidates: list[Path] = [
        Path(__file__).resolve().parents[2] / "images" / "image.png",
        Path.cwd() / "images" / "image.png",
        Path(__file__).resolve().parents[1] / "images" / "image.png",
        Path(__file__).resolve().parent / "images" / "image.png",
    ]
    for p in candidates:
        if p.exists():
            logger.info("Header image found: %s", p)
            return str(p)
    logger.warning("Header image NOT found. Tried: %s", " | ".join(map(str, candidates)))
    return None

def _header_caption(total: int) -> str:
    return (
        "üõç <b>–ú–ê–ì–ê–ó–ò–ù</b>\n\n"
        f"üõí <b>–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:</b> {total}\n\n"
        "üëâ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:</b>"
    )

# ---------------- /start ----------------
@router.message(CommandStart())
async def start(message: Message):
    await ensure_user(message.from_user.id, message.from_user.username)
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ.",
        reply_markup=main_menu_kb()
    )

# --------- –ê–∫–∫–∞—É–Ω—Ç—ã: —à–∞–ø–∫–∞(–∫–∞—Ä—Ç–∏–Ω–∫–∞) + –ö–õ–ê–í–ò–ê–¢–£–†–ê –°–ü–ò–°–ö–ê –í –≠–¢–û–ú –ñ–ï –°–û–û–ë–©–ï–ù–ò–ò ---------
@router.message(F.text == "üßæ –ê–∫–∫–∞—É–Ω—Ç—ã")
async def open_accounts(message: Message):
    total = await count_accounts(CATEGORY)
    page = 1
    items = await list_accounts(CATEGORY, limit=MAX_ROWS, offset=0)
    kb = accounts_list_kb(CATEGORY, items, total, page, per_page=MAX_ROWS)

    caption = _header_caption(total)
    header_path = _find_header_image()
    if header_path:
        try:
            # –û–î–ù–û —Å–æ–æ–±—â–µ–Ω–∏–µ: —Ñ–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å + –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞
            await message.answer_photo(photo=FSInputFile(header_path), caption=caption, reply_markup=kb)
            return
        except Exception as e:
            logger.error("Failed to send header image %s: %s", header_path, e)

    # –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç —à–∞–ø–∫–∏ —Å —Ç–æ–π –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(caption, reply_markup=kb)

# --------- –ü—Ä–æ—Ñ–∏–ª—å / –∏–Ω—Ñ–æ ---------
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    await ensure_user(message.from_user.id, message.from_user.username)
    u = await get_user(message.from_user.id)
    bal = await get_balance_rub(message.from_user.id)
    username = u.get("username") or "‚Äî"
    await message.answer(
        "üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"ID: <code>{message.from_user.id}</code>\n"
        f"Username: @{username}\n"
        f"–ë–∞–ª–∞–Ω—Å: <b>{bal} ‚ÇΩ</b>"
    )

@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_text(message: Message):
    await message.answer(
        "‚ùì <b>–ü–æ–º–æ—â—å</b>\n"
        "‚Äî –í ¬´üßæ –ê–∫–∫–∞—É–Ω—Ç—ã¬ª —à–∞–ø–∫–∞ –∏ —Å–ø–∏—Å–æ–∫ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
        "‚Äî –ñ–º–∏—Ç–µ –Ω–∞ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∏ –∫—É–ø–∏—Ç—å.\n"
        "‚Äî ¬´üí∞ –ë–∞–ª–∞–Ω—Å¬ª ‚Äî –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ lolz —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."
    )

@router.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_text(message: Message):
    await message.answer("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @sainz")

# --------- ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª (–∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏) ---------
@router.callback_query(F.data == "main:menu")
async def cb_main_menu(cq: CallbackQuery):
    await cq.answer()
    try:
        await cq.message.delete()
    except Exception:
        pass
    await cq.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

# --------- –ü–∞–≥–∏–Ω–∞—Ü–∏—è / –ù–∞–∑–∞–¥: –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —à–∞–ø–∫—É+—Å–ø–∏—Å–æ–∫ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ---------
@router.callback_query(F.data.startswith("acc:page:"))
async def cb_acc_page(cq: CallbackQuery):
    await cq.answer()
    try:
        page = int(cq.data.split("acc:page:", 1)[1])
    except Exception:
        page = 1

    # –≤—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—ç—Ç–æ –º–æ–≥–ª–∞ –±—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∞)
    try:
        await cq.message.delete()
    except Exception:
        pass

    total = await count_accounts(CATEGORY)
    pages = max(1, ceil(total / MAX_ROWS)) if MAX_ROWS else 1
    page = max(1, min(page, pages))
    offset = (page - 1) * MAX_ROWS

    items = await list_accounts(CATEGORY, limit=MAX_ROWS, offset=offset)
    kb = accounts_list_kb(CATEGORY, items, total, page, per_page=MAX_ROWS)

    caption = _header_caption(total)
    header_path = _find_header_image()
    if header_path:
        try:
            await cq.message.answer_photo(photo=FSInputFile(header_path), caption=caption, reply_markup=kb)
            return
        except Exception as e:
            logger.error("Failed to send header image on page change %s: %s", header_path, e)

    await cq.message.answer(caption, reply_markup=kb)

# --------- –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ ---------
@router.callback_query(F.data.startswith("acc:pick:"))
async def cb_acc_pick(cq: CallbackQuery):
    await cq.answer()
    # —Ñ–æ—Ä–º–∞—Ç acc:pick:<id>:<page>
    parts = cq.data.split(":")
    acc_id = parts[2]
    page = int(parts[3]) if len(parts) > 3 and parts[3].isdigit() else 1

    acc = await get_account_by_id(acc_id)
    if not acc or acc.get("status") != "available":
        # –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º —Å–ø–∏—Å–æ–∫
        return await cb_acc_page(CallbackQuery(
            id=cq.id, from_user=cq.from_user, chat_instance=cq.chat_instance, message=cq.message, data=f"acc:page:{page}"
        ))

    title = acc.get("button_title") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    price = acc.get("price_rub") or 0
    caption = acc.get("caption") or "‚Äî"
    photo_id = acc.get("photo_file_id")

    text = (
        f"üßæ <b>{title}</b>\n"
        f"üíµ –¶–µ–Ω–∞: <b>{price} ‚ÇΩ</b>\n\n"
        f"{caption}"
    )
    kb = account_card_kb(acc_id=int(acc_id), page=page)

    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    try:
        await cq.message.delete()
    except Exception:
        pass

    if photo_id:
        try:
            await cq.message.answer_photo(photo=photo_id, caption=text, reply_markup=kb)
        except Exception:
            await cq.message.answer(text, reply_markup=kb)
    else:
        await cq.message.answer(text, reply_markup=kb)

# --------- –ü–æ–∫—É–ø–∫–∞ (—Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ –¥–µ–Ω–µ–≥) ---------
@router.callback_query(F.data.startswith("acc:buy:"))
async def cb_acc_buy(cq: CallbackQuery):
    await cq.answer()
    acc_id = int(cq.data.split("acc:buy:", 1)[1])

    # 1) –ø—Ä–æ–≤–µ—Ä–∏–º —Ü–µ–Ω—É –∏ –±–∞–ª–∞–Ω—Å
    acc = await get_account_by_id(acc_id)
    if not acc or acc.get("status") != "available":
        return await cq.answer("–¢–æ–≤–∞—Ä —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)

    price = int(acc.get("price_rub", 0))
    title = acc.get("button_title") or "–¢–æ–≤–∞—Ä"
    user_balance = await get_balance_rub(cq.from_user.id)

    if user_balance < price:
        need = price - user_balance
        text = (
            "üí∏ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n"
            f"–¢–æ–≤–∞—Ä: <b>{title}</b>\n"
            f"–¶–µ–Ω–∞: <b>{price} ‚ÇΩ</b>\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{user_balance} ‚ÇΩ</b>\n"
            f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: <b>{need} ‚ÇΩ</b>\n\n"
            "–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å, –æ—Ç–∫—Ä–æ–π—Ç–µ ¬´üí∞ –ë–∞–ª–∞–Ω—Å¬ª –≤ –º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ü–æ–ø–æ–ª–Ω–∏—Ç—å¬ª."
        )
        # –ü–æ–∫–∞–∂–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∫–∞—Ä—Ç–æ—á–∫—É –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
        await cq.message.answer(text)
        return

    # 2) –¥–µ–Ω–µ–≥ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî –ø—Ä–æ–≤–æ–¥–∏–º –ø–æ–∫—É–ø–∫—É
    result = await purchase_account(user_id=cq.from_user.id, acc_id=acc_id)
    status = result["status"]

    if status == "ok":
        creds = result["creds"]
        title = result["title"]
        price = result["price_rub"]

        text = (
            "‚úÖ <b>–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!</b>\n"
            f"–¢–æ–≤–∞—Ä: <b>{title}</b>\n"
            f"–°–ø–∏—Å–∞–Ω–æ: <b>{price} ‚ÇΩ</b>\n\n"
            f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:\n<code>{creds}</code>"
        )
        try:
            await cq.message.edit_caption(caption=text, reply_markup=None)
        except Exception:
            try:
                await cq.message.edit_text(text, reply_markup=None)
            except Exception:
                await cq.message.answer(text)
        return

    if status == "not_available":
        await cq.answer("–¢–æ–≤–∞—Ä —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
        return

    # —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    logger.error("purchase_account failed: %r", result)
    await cq.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
