# app/handlers/warthunder.py
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest

from app.keyboards.wt import wt_ranks_keyboard
from app.keyboards.accounts import MAX_ROWS  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç —Å—Ç—Ä–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ –æ–±—â–∏–π per_page

from app.db import (
    ensure_user,
    get_balance_rub,
    add_balance_rub,
    get_account_by_id as get_account_rank8,
    purchase_account as purchase_rank8,
    list_accounts as list_rank8_accounts,
    count_accounts as count_rank8_accounts,
)
from app.db_ranks import (
    list_available as list_rank_accounts,
    count_available as count_rank_accounts,
    get_account as get_rank_account,
    mark_sold as mark_rank_sold,
)

logger = logging.getLogger(__name__)
router = Router(name="warthunder")

# ---------------------------------------------------------------------
# –í–•–û–î: –∫–Ω–æ–ø–∫–∞ "üéÆ WarThunder" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
# ---------------------------------------------------------------------
@router.message(F.text == "üéÆ WarThunder")
async def wt_entry(msg: Message):
    await ensure_user(msg.from_user.id, msg.from_user.username)
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª WarThunder:", reply_markup=wt_ranks_keyboard())

# ---------------------------------------------------------------------
# –í–´–ë–û–† –†–ê–ù–ì–ê
# ---------------------------------------------------------------------
@router.callback_query(F.data.startswith("wt:rank:"))
async def wt_rank_select(cb: CallbackQuery):
    _, _, rank = cb.data.split(":")  # '8'|'7'|'6'
    page = 1
    per_page = MAX_ROWS

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞
    if rank == "8":
        total = await count_rank8_accounts("WarThunder")
        items = await list_rank8_accounts("WarThunder", limit=per_page, offset=(page - 1) * per_page)
    else:
        total = await count_rank_accounts(rank)
        items = await list_rank_accounts(rank, limit=per_page, offset=(page - 1) * per_page)

    if not items:
        new_text = f"–ü–æ–∫–∞ –ø—É—Å—Ç–æ –≤ {rank} rank."
        try:
            if (cb.message.text or "") == new_text:
                await cb.message.edit_reply_markup(reply_markup=wt_ranks_keyboard())
            else:
                await cb.message.edit_text(new_text, reply_markup=wt_ranks_keyboard())
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                pass
            else:
                raise
        await cb.answer()
        return

    # –°—Ç—Ä–æ–∏–º –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–ø–æ MAX_ROWS —Å—Ç—Ä–æ–∫)
    rows: list[list[InlineKeyboardButton]] = []
    for it in items:
        title = it.get("button_title")
        price = it.get("price_rub")
        acc_id = it.get("id")
        rows.append([InlineKeyboardButton(text=f"{title} ‚Äî {price}‚ÇΩ", callback_data=f"wt:item:{rank}:{acc_id}")])

    # –î–æ–±–∞–≤–∏–º ¬´–Ω–∞–∑–∞–¥¬ª
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="wt:back")])
    kb = InlineKeyboardMarkup(inline_keyboard=rows)

    header = f"–°–µ–∫—Ü–∏—è: {rank} rank ({total} —à—Ç.)"
    try:
        if (cb.message.text or "") == header:
            await cb.message.edit_reply_markup(reply_markup=kb)
        else:
            await cb.message.edit_text(header, reply_markup=kb)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise
    await cb.answer()

# ---------------------------------------------------------------------
# –ù–ê–ó–ê–î –ö –í–´–ë–û–†–£ –†–ê–ù–ì–û–í
# ---------------------------------------------------------------------
@router.callback_query(F.data == "wt:back")
async def wt_back(cb: CallbackQuery):
    try:
        if (cb.message.text or "") == "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª WarThunder:":
            await cb.message.edit_reply_markup(reply_markup=wt_ranks_keyboard())
        else:
            await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª WarThunder:", reply_markup=wt_ranks_keyboard())
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise
    await cb.answer()

# ---------------------------------------------------------------------
# –û–¢–ö–†–´–¢–ò–ï –ö–ê–†–¢–û–ß–ö–ò –¢–û–í–ê–†–ê
# ---------------------------------------------------------------------
@router.callback_query(F.data.startswith("wt:item:"))
async def wt_item(cb: CallbackQuery):
    _, _, rank, acc_id_str = cb.data.split(":")
    acc_id = int(acc_id_str)

    # –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç –∏–∑ –Ω—É–∂–Ω–æ–π –ë–î
    row = await (get_account_rank8(acc_id) if rank == "8" else get_rank_account(rank, acc_id))

    if not row or row.get("status") != "available":
        await cb.answer("–õ–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return

    caption_lines = [
        row.get("caption") or "",
        "",
        f"–¶–µ–Ω–∞: {row['price_rub']}‚ÇΩ",
        f"ID: {row['id']}",
        f"Rank: {rank}",
    ]
    caption = "\n".join(caption_lines)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f"wt:buy:{rank}:{row['id']}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"wt:rank:{rank}")],
    ])

    try:
        if row.get("photo_file_id"):
            try:
                await cb.message.edit_media(InputMediaPhoto(media=row["photo_file_id"], caption=caption), reply_markup=kb)
            except TelegramBadRequest:
                # –µ—Å–ª–∏ –±—ã–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∑–∞–º–µ–Ω–∏–º –Ω–∞ —Ç–µ–∫—Å—Ç
                await cb.message.edit_text(caption, reply_markup=kb)
        else:
            await cb.message.edit_text(caption, reply_markup=kb)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise
    await cb.answer()

# ---------------------------------------------------------------------
# –ü–û–ö–£–ü–ö–ê
# ---------------------------------------------------------------------
@router.callback_query(F.data.startswith("wt:buy:"))
async def wt_buy(cb: CallbackQuery):
    _, _, rank, acc_id_str = cb.data.split(":")
    acc_id = int(acc_id_str)

    if rank == "8":
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é –ë–î
        result = await purchase_rank8(cb.from_user.id, acc_id)
        status = result.get("status")
        if status == "ok":
            creds = result["creds"]
            await cb.message.answer(f"–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!\n–î–∞–Ω–Ω—ã–µ:\n<code>{creds}</code>", parse_mode="HTML")
            await cb.answer()
            return
        if status == "insufficient":
            await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.", show_alert=True)
            return
        if status == "not_available":
            await cb.answer("–õ–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return

        logger.error("purchase_rank8 failed: %r", result)
        await cb.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    # 7/6 —Ä–∞–Ω–≥–∏ ‚Äî –ø–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ –ë–î
    row = await get_rank_account(rank, acc_id)
    if not row or row.get("status") != "available":
        await cb.answer("–õ–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return

    price = int(row["price_rub"])
    balance = await get_balance_rub(cb.from_user.id)

    if balance < price:
        await cb.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.", show_alert=True)
        return

    # —Å–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
    await add_balance_rub(cb.from_user.id, -price)
    # –ø–æ–º–µ—á–∞–µ–º –ø—Ä–æ–¥–∞–Ω–Ω—ã–º –≤ rank-–ë–î
    await mark_rank_sold(rank, acc_id)

    # –æ—Ç–¥–∞—ë–º –¥–æ—Å—Ç—É–ø—ã
    creds = row["creds"]
    await cb.message.answer(f"–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!\n–î–∞–Ω–Ω—ã–µ:\n<code>{creds}</code>", parse_mode="HTML")
    await cb.answer()
